module Latch_ID_RR (
	input							clk_i,
	input							rst_ni,
	input				[31:0]	pc_i,
	input				[63:0]	rr_data1_i,
	input				[63:0]	rr_data2_i,
	input				[63:0]	se_immed_i,
	input							regwrite_i,
	input							memread_i, 
	input							memwrite_i,
	input							memtoreg_i,
	input							alusrc_i,  
	input				[2:0]		aluop_i,   
	input							branch_i,  
	input							jump_i,     
	output	reg	[31:0]	pc_o,
	output	reg	[63:0]	rr_data1_o,
	output	reg	[63:0]	rr_data2_o,
	output	reg	[63:0]	se_immed_o,
	output 	reg				regwrite_o,
	output 	reg				memread_o, 
	output 	reg				memwrite_o,
	output 	reg				memtoreg_o,
	output 	reg				alusrc_o,  
	output 	reg	[2:0]		aluop_o,   
	output 	reg				branch_o,  
	output 	reg				jump_o     
);
	always @(posedge clk_i, negedge rst_ni)
		begin
		if(!rst_ni)
			begin
				pc_o <= 32'h0;
				rr_data1_o <= 64'h0;
				rr_data2_o <= 64'h0;
				se_immed_o <= 64'h0;
				regwrite_o <= 1'h0;
				memread_o  <= 1'h0;
				memwrite_o <= 1'h0;
				memtoreg_o <= 1'h0;
				alusrc_o	  <= 1'h0;
				aluop_o	  <= 3'h0;
				branch_o	  <= 1'h0;
				jump_o     <= 1'h0;
			end
		else
			begin
				pc_o <= pc_i;
				rr_data1_o <= rr_data1_i;
				rr_data2_o <= rr_data2_i;
				se_immed_o <= se_immed_i;
				regwrite_o <= regwrite_i;
				memread_o  <= memread_i;
				memwrite_o <= memwrite_i;
				memtoreg_o <= memtoreg_i;
				alusrc_o	  <= alusrc_i;  
				aluop_o	  <= aluop_i;   
				branch_o	  <= branch_i;	 
				jump_o     <= jump_i;    
			end
		end
endmodule 